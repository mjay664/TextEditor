


/*
 * Copyright (C) 2017 Vipin Gautam and Jay Raj Singh
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
     * version 0.10 13 Jan 2017 @author MJay.
     * 
     * This class is designed to make a set of keys from one key input by user.
     * Class contains two public constructors one with argument that is key input by user and other is general constructor.
     * Class have 5 private integer variables 
     * The class contains a number of private methods with return type integer
     * generateKey1(integer variable)
     * geerateKey2(integer variable, integer variable)
     * generateKey3(integer variable, integer variable, integer variable)
     * generateKey4(integer variable, integer variable, integer variable, integer variable)
     * digitAdder(integer variable)
     * digitAdderInPair(integer variable)
     * mod256(integer variable)
     * valueShiftLeft(integer variable, integer variable)
     * 
     * The class contains two default method with return type integer array
     * getKeySet(integer variable)
     * getKeySet()
*/

public class KeyGenerator {

    /**
     *  key: This variable contains key given by user
     */
    private int key;
    
    /**
     * key1: This variable contains 8 bit key generated by algorithm
     */
    private int key1;
    
    /**
     * key2: This variable contains 32 bit key generated by algorithm
     */
    private int key2;
    
    /**
     * key3: This variable contains 32 bit key generated by algorithm
     */
    private int key3;
    
    /**
     * key4: This variable contains 32 bit key generated by algorithm
     */
    private int key4;
    
    /**
     * The class contains one constant MAX_MOD that contains value 256 that is used in mod.
     */
    public static final int MAX_MOD=256;
    
    /**
    *Constructor taking an argument that is key.
    */
    public KeyGenerator(int key)
    {
        this.key=key;
    }
    
    /**
    *General constructor.
    */
    public KeyGenerator()
    {
        
    }
    
    /**
    *getKeySet(integer variable) returns a set of keys generated from the argument key.
    *An integer array is declared in the function.
    *Four functions are called and assigned key values to array.
    */
    int[] getKeySet(int key)
    {
        int[] key_set=new int[4];
        
        key1=generateKey1(key);
        key2=generateKey2(key,key1);
        key3=generateKey3(key,key1,key2);
        key4=generateKey4(key,key1,key2,key3);
        
        key_set[0]=key1;
        key_set[1]=key2;
        key_set[2]=key3;
        key_set[3]=key4;
        
        return key_set;
    }
    
    /**
    *getKeySet() returns a set of keys.
    *An integer array is declared in the function.
    *Four functions are called and assigned key values to array.
    */
    int[] getKeySet()
    {
        int[] key_set=new int[4];
        
        key1=generateKey1(key);
        key2=generateKey2(key,key1);
        key3=generateKey3(key,key1,key2);
        key4=generateKey4(key,key1,key2,key3);
        
        key_set[0]=key1;
        key_set[1]=key2;
        key_set[2]=key3;
        key_set[3]=key4;
        
        return key_set;
    }
    
    /**
    * Function Name: generateKey1(integer variabe)
    * Variables Used: integer key1
    *This function is used to generate key1 from the key given in argument.
    *All the digits of key are added using digitAdder() function.
    *Then argument key is rotated left using Integer.rotateLeft() funnction by the result of digitAdder() function.
    *The resultant key is key1 returned.
    */
    private int generateKey1(int key) 
    {
        int key1 = Integer.rotateLeft(key, this.digitAdder(key));
        return key1;
    }

    /**
    * Function Name: generateKey2(integer variable, integer variable)
    * Variables Used: integer key2
    *This function is used to generate key2.
    *firstly XOR of key and key1 is stored in key2 variable.
    *Then key2 is reversed.
    *Then to get 8 bit output digitdderInPair() function is used.
    *The result of function call is key2
    */
    private int generateKey2(int key, int key1) 
    {
        int key2 = key ^ key1;
        
        key2 = this.reverseValue(key2);
        key2 = this.digitAdderInPair(key2);
        
        return key2;
    }

    /**
    * Function Name: generateKey3(integer variable,integer variable,integer variable)
    * Variables Used: integer key3
    *This function performs operations and return key3 by using argument keys.
    */
    private int generateKey3(int key, int key1, int key2) 
    {
        key1 = key ^ key1;
        key1 = this.reverseValue(key1);
        
        int key3 = this.digitAdderInPair(key1);
        
        key3 = this.reverseValue(key3);
        key3 ^= key2;
        key3 = this.mod256(key3);
        
        return key3;
    }

    /**
    * Function Name: generateKey4(integer variable, integer variable, integer variable, integer variable)
    * Variables Used: integer key4
    */
    private int generateKey4(int key, int key1, int key2, int key3) 
    {
        key = Integer.rotateLeft(key, this.digitAdder(key2));
        key1 = Integer.rotateLeft(key1, this.digitAdder(key3));
        
        int key4 = this.reverseValue(key);
        
        key4 ^= key1;
        key4 ^= key;
        key4 = this.reverseValue(key4);
        
        return key4;
    }

    /**
    Function Name: digitAdder(int x)
    This function add all digits of given number.
    */
    private int digitAdder(int x) {
        if (x < 0) {
            x *= -1;
        }
        while (x > 9) {
            String s = "" + x;
            int y = 0;
            for (int i = 0; i < s.length(); ++i) {
                y += Integer.parseInt(s.substring(i, i + 1));
            }
            x = y;
        }
        return x;
    }

    /**
    Function Name: digitAdderInPair(int Val)
    This function add digits of given number in pair of 3.
    */
    private int digitAdderInPair(int val) 
    {
        StringBuffer s = new StringBuffer("" + val);
        String[] sr = new String[5];
        int len = s.length();
        int add_need = 10 - len;
        StringBuffer s2 = new StringBuffer();
        
        for (int i = 0; i < add_need; ++i) 
        {
            s2 = s2.append("0");
        }
        
        s2 = s2.append(s);
        int j = 0;
        
        for (int i2 = 0; i2 < 5; ++i2) 
        {
            sr[i2] = "" + this.digitAdder(Integer.parseInt(s2.substring(j, j + 2)));
            j += 2;
        }
        
        sr[2] = sr[0] + sr[1] + sr[2];
        sr[2] = "" + this.digitAdder(Integer.parseInt(sr[2]));
        sr[2] = sr[2] + sr[3] + sr[4];
        int x = Integer.parseInt(sr[2]);
        x = this.mod256(x);
        
        return x;
    }

    /**
    Function Name: mod256(int num)
    This function calculate mod of a given number.
    */
    private int mod256(int num)
    {
        int num_mod=num;
        
        if(num<MAX_MOD)
        {
            return num_mod;
        }
        else
        {
            while(num_mod>MAX_MOD)
            {
                num_mod=num_mod-MAX_MOD;
            }
        }
        
        return num_mod;
    }
    
    /**
    Function Name: reverseValue(int val)
    This function reverse the given number.
    */
    private int reverseValue(int val) 
    {
        int x = val;
        StringBuffer s = new StringBuffer("" + x);
        
        s = s.reverse();
        x = Integer.parseInt(s.toString());
        
        return x;
    }
    
    /**
    Function Name: valueShiftLeft(int val, int shift)
    This function shift the bits of given number.
    */
    private  int valueShiftLeft(int val, int shift)
    {
        String s = "" + val;
        char[] c = s.toCharArray();
        
        if (shift != 0) {
            if (s.length() == 3) 
            {
                for (int i = 0; i < shift; ++i)
                {
                    char tmp1 = c[2];
                    char tmp2 = c[1];
                    c[1] = c[0];
                    c[2] = tmp2;
                    c[0] = tmp1;
                }
                s = "" + c[0] + c[1] + c[2];
            }
            else if (s.length() == 2) 
            {
                for (int i = 0; i < shift; ++i)
                {
                    char tmp1 = c[1];
                    c[1] = c[0];
                    c[0] = tmp1;
                }
                
                s = "" + c[0] + c[1];
            } 
            else if (s.length() == 1) 
            {
                return val;
            }
        }
        
        val = Integer.parseInt(s);
        
        return val;
    }


}

